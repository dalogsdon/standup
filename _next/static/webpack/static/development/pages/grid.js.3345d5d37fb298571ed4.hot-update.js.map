{"version":3,"file":"static/webpack/static/development/pages/grid.js.3345d5d37fb298571ed4.hot-update.js","sources":["webpack:///./pages/grid.js"],"sourcesContent":["import Utils from '../util/Utils';\n\nimport '../styles/grid.scss';\n\nfunction wrapDir(i, length) {\n    const negative = i < 0 ? -1 : 1;\n    const mod = negative * (i % length);\n    if (mod < 0) {\n        return length - mod;\n    }\n    return mod;\n}\n\nclass Grid extends React.Component {\n    state = {\n        highlight: {},\n        names: Utils.getNames(),\n        stopping: false,\n        winner: {},\n    };\n    colCount = Math.ceil(Math.sqrt(this.state.names.length));\n    nameIdCounter = 0;\n    nameIdsInProgress = new Set();\n    _getNameId = () => {\n        return ++this.nameIdCounter;\n    };\n    componentDidMount() {\n        Utils.loadVoices();\n        this.pickName(50);\n        this.pickName(50);\n    }\n    declareWinner = (nameId, isEngineer) => {\n        this.incrementToFilteredWinner(nameId, isEngineer).then(() => {\n            const winner = this.state.names[this.state.highlight[nameId]];\n            this.setState((state) => ({ winner: { ...state.winner, [nameId]: winner } }));\n            if (this.nameIdsInProgress.size === 0) {\n                const winnerIds = Object.keys(this.state.winner);\n\n                Utils.say(`${winner.spoken || winner.value} is the winner!`);\n            }\n        });\n    };\n    manuallyDeclareWinner = (winner, nameId, highlight) => () => {\n        if (this.state.winner[nameId]) {\n            Utils.say(`Just kidding, ${winner.spoken || winner.value} is actually the winner!`);\n            this.setState((state) => ({ \n                winner: { ...state.winner, [nameId]: winner }, \n                highlight: { ...state.highlight, [nameId]: highlight } \n            }));\n        }\n    };\n    incrementToFilteredWinner = (nameId, isEngineer) => {\n        if (isEngineer !== undefined) {\n            return new Promise((resolve, reject) => {\n                resolve();\n            });\n        }\n        return Promise.resolve();\n    };\n    pickName = (timeout, isEngineer) => {\n        const nameId = this._getNameId();\n        this.nameIdsInProgress.add(nameId);\n        this.setState((state) => ({ highlight: { ...state.highlight, [nameId]: 0 }} ), \n            () => this._pickNameRecur(timeout, isEngineer, nameId));\n    };\n    _pickNameRecur = (timeout, isEngineer, nameId) => {\n        if (timeout > 400) {\n            this.nameIdsInProgress.delete(nameId);\n            this.declareWinner(nameId, isEngineer);\n        } else {\n            window.setTimeout(() => {\n                const c = this.state.highlight[nameId];\n                const dir = [c - this.colCount, c - 1, c + this.colCount, c + 1];\n                const randomDir = wrapDir(dir[Math.floor(Math.random() * dir.length)], this.state.names.length);\n                const nextTimeout = this.state.stopping ? timeout * 1.05 : timeout;\n                this.setState({ \n                    highlight: { ...this.state.highlight, [nameId]: randomDir } \n                }, () => this._pickNameRecur(nextTimeout, isEngineer, nameId));\n            }, timeout);\n        }\n    };\n    stop = () => {\n        this.setState({ stopping: true });\n    };\n    getNameAttrs = (name, idx) => {\n        const attrs = {};\n        for (let [nameId, highlighted] of Object.entries(this.state.highlight)) {\n            if (idx === highlighted) {\n                attrs[`data-highlight-${nameId}`] = true;\n            }\n        }\n        for (let [nameId, winner] of Object.entries(this.state.winner)) {\n            if (name.value === winner.value) {\n                attrs[`data-winner-${nameId}`] = true;\n            }\n        }\n        return attrs;\n    };\n    getWinnerButtonText = () => {\n        const nameIds = Object.keys(this.state.winner).sort();\n        return nameIds.map((nameId) => this.state.winner[nameId].value).join(' and ') + ' are the winners!';\n    }\n    render() {\n        const { names, stopping, winner } = this.state;\n\n        const style = {\n            width: 100 / this.colCount + '%',\n        };\n\n        const numWinners = Object.keys(winner).length;\n        let stopText = 'Stop!';\n        if (numWinners === 0 && stopping) {\n            stopText = 'Stopping!';\n        } else if (numWinners > 0) {\n            stopText = this.getWinnerButtonText();\n        }\n\n        const classname = `grid ${stopping ? 'stopping' : ''}`;\n        return (\n            <div className={classname}>\n                {names.map((n, i) =>\n                    <div className=\"name-wrapper\" key={n.value} style={style}>\n                        <div\n                            className=\"name\"\n                            {...this.getNameAttrs(n, i)}\n                            onClick={this.manuallyDeclareWinner(n, 1, i)}>\n                            {n.value}\n                        </div>\n                    </div>\n                )}\n                <div className=\"stop-btn-wrapper\">\n                    <div className=\"stop-btn\" onClick={this.stop}>{stopText}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Grid;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AARA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AA5EA;AACA;AACA;AACA;AACA;;;AAwEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAGA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA1HA;AACA;AA4HA;;;;A","sourceRoot":""}