{"version":3,"file":"static/webpack/static/development/pages/grid.js.7f210f65451ae737c60b.hot-update.js","sources":["webpack:///./pages/grid.js"],"sourcesContent":["import PageLayout from '../components/PageLayout';\nimport Utils from '../util/Utils';\n\nimport '../styles/grid.scss';\n\nfunction wrapDir(i, length) {\n    const negative = i < 0 ? -1 : 1;\n    const mod = negative * (i % length);\n    if (mod < 0) {\n        return length - mod;\n    }\n    return mod;\n}\n\nclass Grid extends React.Component {\n    state = {\n        highlight: 0,\n        names: Utils.getNames(),\n        stopping: false,\n        winner: null,\n    };\n    colCount = Math.ceil(Math.sqrt(this.state.names.length));\n    rowCount = Math.ceil(this.state.names.length / this.colCount);\n    componentDidMount() {\n        Utils.loadVoices();\n        this.pickName(50);\n    }\n    componentWillUnmount() {\n        //window.clearInterval(this.interval);\n    }\n    declareWinner = () => {\n        const winner = this.state.names[this.state.highlight];\n        Utils.say((winner.spoken || winner.value) + ' is the winner!');\n        this.setState({ winner });\n    };\n    pickName = (timeout) => {\n        if (timeout > 400) {\n            this.declareWinner();\n        } else {\n            window.setTimeout(() => {\n                const c = this.state.highlight;\n                const dir = [c - this.colCount, c - 1, c + this.colCount, c + 1];\n                const randomDir = wrapDir(dir[Math.floor(Math.random() * dir.length)], this.state.names.length);\n                const nextTimeout = this.state.stopping ? timeout * 1.05 : timeout;\n                this.setState({ highlight: randomDir }, () => this.pickName(nextTimeout));\n            }, timeout);\n        }\n    };\n    stop = () => {\n        this.setState({ stopping: true });\n    };\n    render() {\n        const { names, highlight, stopping, winner } = this.state;\n        const bodyWidth = document.body.clientWidth;\n\n        let colCount = this.colCount;\n        if (bodyWidth <= 600) {\n            colCount = 3;\n        }\n\n        const style = {\n            width: 100 / this.colCount + '%',\n        };\n\n        let stopText = 'Stop!';\n        if (!winner && stopping) {\n            stopText = 'Stopping!';\n        } else if (winner) {\n            stopText = winner.value + ' is the winner!';\n        }\n\n        const classname = `grid ${stopping ? 'stopping' : ''}`;\n        return (\n            <PageLayout className={classname}>\n                <div className=\"page_content\">\n                    {names.map((n, i) =>\n                        <div className=\"name-wrapper\" key={n.value} style={style}>\n                            <div className=\"name\" data-highlight={i === highlight} data-winner={i === highlight && !!winner}>{n.value}</div>\n                        </div>\n                    )}\n                    <div className=\"stop-btn-wrapper\">\n                        <div class=\"stop-btn\" onClick={this.stop}>{stopText}</div>\n                    </div>\n                </div>\n            </PageLayout>\n        );\n    }\n}\n\nexport default Grid;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AA5BA;AACA;AACA;AACA;;;AACA;AAEA;;;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAxEA;AACA;AA0EA;;;;A","sourceRoot":""}