{"version":3,"file":"static/webpack/static/development/pages/grid.js.dcccae29df5365515f1e.hot-update.js","sources":["webpack:///./pages/grid.js"],"sourcesContent":["import Utils from '../util/Utils';\n\nimport '../styles/grid.scss';\n\nfunction wrapDir(i, length) {\n    const negative = i < 0 ? -1 : 1;\n    const mod = negative * (i % length);\n    if (mod < 0) {\n        return length - mod;\n    }\n    return mod;\n}\n\nclass Grid extends React.Component {\n    state = {\n        highlight: 0,\n        names: Utils.getNames(),\n        stopping: false,\n        winner: null,\n    };\n    colCount = Math.ceil(Math.sqrt(this.state.names.length));\n    pickNameId = 0;\n    componentDidMount() {\n        Utils.loadVoices();\n        this.pickName(50);\n    }\n    declareWinner = () => {\n        const winner = this.state.names[this.state.highlight];\n        Utils.say(`${winner.spoken || winner.value} is the winner!`);\n        this.setState({ winner });\n    };\n    manuallyDeclareWinner = (winner, highlight) => () => {\n        if (this.state.winner) {\n            Utils.say(`Just kidding, ${winner.spoken || winner.value} is actually the winner!`);\n            this.setState({ winner, highlight });\n        }\n    };\n    pickName = (timeout) => {\n        this._pickNameRecur(timeout, ++this.pickNameId);\n    };\n    pickName = (timeout) => {\n        if (timeout > 400) {\n            this.declareWinner();\n        } else {\n            window.setTimeout(() => {\n                const c = this.state.highlight;\n                const dir = [c - this.colCount, c - 1, c + this.colCount, c + 1];\n                const randomDir = wrapDir(dir[Math.floor(Math.random() * dir.length)], this.state.names.length);\n                const nextTimeout = this.state.stopping ? timeout * 1.05 : timeout;\n                this.setState({ highlight: randomDir }, () => this.pickName(nextTimeout));\n            }, timeout);\n        }\n    };\n    stop = () => {\n        this.setState({ stopping: true });\n    };\n    render() {\n        const { names, highlight, stopping, winner } = this.state;\n\n        const style = {\n            width: 100 / this.colCount + '%',\n        };\n\n        let stopText = 'Stop!';\n        if (!winner && stopping) {\n            stopText = 'Stopping!';\n        } else if (winner) {\n            stopText = winner.value + ' is the winner!';\n        }\n\n        const classname = `grid ${stopping ? 'stopping' : ''}`;\n        return (\n            <div className={classname}>\n                {names.map((n, i) =>\n                    <div className=\"name-wrapper\" key={n.value} style={style}>\n                        <div\n                            className=\"name\"\n                            data-highlight={i === highlight}\n                            data-winner={i === highlight && !!winner}\n                            onClick={this.manuallyDeclareWinner(n, i)}>\n                            {n.value}\n                        </div>\n                    </div>\n                )}\n                <div className=\"stop-btn-wrapper\">\n                    <div className=\"stop-btn\" onClick={this.stop}>{stopText}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Grid;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AALA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AAlCA;AACA;AACA;AACA;;;AA+BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AA5EA;AACA;AA8EA;;;;A","sourceRoot":""}